# Global options
{
    # Admin API
    admin 0.0.0.0:2019

    # Email for Let's Encrypt
    email admin@example.com

    # Global security headers
    servers {
        protocols h1 h2 h3
    }

    # Load GeoIP database
    order geoip first
    geoip {
        database_path /data/GeoLite2-Country.mmdb
    }
}

# Main domain with netcup DNS
example.com, www.example.com {
    # Use netcup for DNS challenge
    tls {
        dns netcup {
            api_key {env.NETCUP_API_KEY}
            api_password {env.NETCUP_API_PASSWORD}
            customer_number {env.NETCUP_CUSTOMER_NUMBER}
        }
    }

    # Security middleware
    security {
        user registration {
            username "admin"
            email "admin@example.com" 
            password "changeme123"
        }
        
        authentication portal myportal {
            crypto key sign-verify {env.JWT_SHARED_KEY}
            enable identity provider local
            cookie lifetime 86400
        }
        
        authorization policy mypolicy {
            allow roles authp/admin authp/user
        }
    }

    # Coraza WAF
    coraza_waf {
        directives `
            SecRuleEngine On
            SecRequestBodyAccess On
            SecRule REQUEST_HEADERS:Content-Type "text/xml" \
                "id:200001,phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=XML"
            SecRule ARGS "@detectSQLi" \
                "id:1001,phase:2,block,msg:'SQL Injection Attack',logdata:'Matched Data: %{MATCHED_VAR} found within %{MATCHED_VAR_NAME}'"
            SecRule ARGS "@detectXSS" \
                "id:1002,phase:2,block,msg:'XSS Attack',logdata:'Matched Data: %{MATCHED_VAR} found within %{MATCHED_VAR_NAME}'"
        `
    }

    # GeoIP filtering - only allow specific countries
    @blocked_countries not geoip {
        allow_countries DE AT CH US GB
    }
    respond @blocked_countries "Access denied from your location" 403

    # Rate limiting
    rate_limit {
        zone static_files {
            key {remote_host}
            events 30
            window 1m
        }
        zone api {
            key {remote_host}
            events 100
            window 1h
        }
    }

    # Static files with rate limiting
    @static file
    rate_limit @static static_files
    file_server @static

    # API with stricter rate limiting  
    @api path /api/*
    rate_limit @api api
    reverse_proxy @api backend-api:8080

    # Main app
    reverse_proxy backend:8080 {
        health_uri /health
        health_interval 30s
    }

    # Security headers
    header {
        Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
        X-Content-Type-Options "nosniff"
        X-Frame-Options "DENY"
        X-XSS-Protection "1; mode=block"
        Referrer-Policy "strict-origin-when-cross-origin"
        Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'"
    }

    # Logging
    log {
        output file /data/logs/access.log {
            roll_size 100MiB
            roll_keep 10
        }
        format json
    }
}

# Subdomain with DuckDNS
subdomain.duckdns.org {
    tls {
        dns duckdns {
            token {env.DUCKDNS_TOKEN}
        }
    }

    # Simple proxy for development
    reverse_proxy dev-server:3000 {
        header_up Host {upstream_hostport}
        header_up X-Real-IP {remote_host}
        header_up X-Forwarded-For {remote_host}
        header_up X-Forwarded-Proto {scheme}
    }
}

# Docker proxy integration
:80 {
    # Automatically configure services based on Docker labels
    reverse_proxy {
        dynamic docker {
            container_name caddy
        }
    }
}

# Dynamic scaling with Sablier
scale.example.com {
    tls internal

    # Route to Sablier for dynamic container management
    reverse_proxy sablier:10000 {
        dynamic docker {
            display_name "Scalable App"
            theme "ghost"
            session_duration "5m"
        }
    }
}

# Admin interface (protected)
admin.example.com {
    tls internal
    
    # Require authentication
    security {
        authentication portal myportal
        authorization policy mypolicy
    }

    # Proxy to Caddy admin API
    reverse_proxy localhost:2019

    # Security headers for admin
    header {
        X-Robots-Tag "noindex, nofollow, nosnippet, noarchive"
    }
}

# Health check endpoint
health.example.com {
    tls internal
    
    respond /health "OK" 200
    respond /version `{"version": "caddy-custom", "plugins": ["netcup", "duckdns", "ddns", "dockerproxy", "sablier", "security", "coraza", "geoip"]}` 200 {
        header Content-Type "application/json"
    }
}

# Redirect HTTP to HTTPS
http:// {
    redir https://{host}{uri} permanent
}